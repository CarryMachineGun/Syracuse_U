package com.example.project_one;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Stack;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TaskRepository taskRepository;
    private HashMap<Integer, Stack<Task>> history = new HashMap<>();

    @GetMapping(path = "/CreateTask")
    public @ResponseBody String createTask() {
        Task n = new Task();

        n.setState("Todo");
        n.setUser(null);
        n.setTimestamp(new Timestamp(System.currentTimeMillis()));
        n.editDescription(null);
        taskRepository.save(n);
        // n.setId(taskRepository.count());

        return String.valueOf(n.getId());
    }

    @PostMapping(path = "/ModifyTask")
    public @ResponseBody String modifyTask(@RequestParam(required = true) String id,
            @RequestParam(required = false) String user,
            @RequestParam(required = false) String state, @RequestParam(required = false) String comment,
            @RequestParam(required = false) String description) {
        if (!taskRepository.findById(Integer.valueOf(id)).isPresent())
            return "failure";

        Integer this_id = Integer.valueOf(id);
        Task n = taskRepository.findById(this_id).get();

        if (history.get(this_id) == null)
            history.put(this_id, new Stack<Task>());
        history.get(this_id).push(new Task(n));

        if (user != null && !n.setUser(user))
            return "failure";
        if (state != null && !n.setState(state))
            return "failure";
        if (comment != null)
            n.addComment(comment);
        if (description != null)
            n.editDescription(description);

        taskRepository.save(n);

        return "success";
    }

    @PostMapping(path = "/UndoTaskModification")
    public @ResponseBody String UndoTaskModification(@RequestParam(required = true) String id) {
        if (!taskRepository.findById(Integer.valueOf(id)).isPresent())
            return "failure";

        Integer this_id = Integer.valueOf(id); 
        
        if(history.get(this_id).size() == 0)
            return "failure";

        Task prev_task = history.get(this_id).pop();

        // modifyTask(id, id, id, id, id)
        taskRepository.save(prev_task);

        return "success";
    }

    @PostMapping(path = "/DeleteTask")
    public @ResponseBody String deleteTask(@RequestParam(required = true) String id) {
        if (!taskRepository.findById(Integer.valueOf(id)).isPresent())
            return "failure";

        taskRepository.delete(taskRepository.findById(Integer.valueOf(id)).get());

        return "success";
    }

    @GetMapping(path = "/ShowBoard")
    public @ResponseBody Iterable<Task> getAllTasks() {
        // This returns a JSON or XML with the users
        return taskRepository.findAll();
    }

    @GetMapping(path = "/CleanDatabase")
    public @ResponseBody String cleanDatabase() {
        taskRepository.deleteAll();

        return "success";
    }
}
