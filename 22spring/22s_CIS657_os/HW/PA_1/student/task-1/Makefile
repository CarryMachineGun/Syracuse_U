#==========================================
# Makefile for tinyshell
#
# author: Endadul Hoque <enhoque@syr.edu>
#
# DO NOT EDIT THIS FILE.
#==========================================
.PHONY: clean print_header print_footer

SRC = tinyshell.c
PROG = tshell
EXT = -g -static-libasan -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined 
FLAGS = -Werror -Wall 

TEST_SIMPLE = test-simple
TEST_IO = test-io
TEST_ERR = test-error

THINGS_TO_CLEAN = $(PROG) $(TEST_ERR).out $(TEST_IO).out $(TEST_SIMPLE).out *.log
#===================================================



all: build

build:
	gcc -o $(PROG) $(FLAGS) $(SRC)
debug:
	gcc -DDEBUG -o $(PROG) $(FLAGS) $(SRC)
clean: 
	rm -f $(THINGS_TO_CLEAN)

asan:
	gcc -DDEBUG -o $(PROG) $(FLAGS) $(EXT) $(SRC)


test-simple: clean build $(PROG) test1
test-io: clean build $(PROG) test3
test-error: clean build $(PROG) test2

test-all: clean build $(PROG) test1 test2 test3


#=========================
# For colorful output
#=========================
ERROR_COLOR     := \033[0;31m
WARN_COLOR      := \033[0;33m
OK_COLOR        := \033[0;32m
COM_COLOR       := \033[0;34m
NO_COLOR        := \033[0m


OK_STRING       := "$(OK_COLOR)[OK]$(NO_COLOR)"
PASSED_STRING   := "$(OK_COLOR)[PASSED]$(NO_COLOR)"
ERROR_STRING    := "$(ERROR_COLOR)[ERRORS]$(NO_COLOR)"
FAILED_STRING   := "$(ERROR_COLOR)[FAILED]$(NO_COLOR)"
WARN_STRING     := "$(WARN_COLOR)[WARNINGS]$(NO_COLOR)"

#==================================#

print_header: 
	@printf "\n======================================\n"
	@printf "            New test \n"
	@printf "======================================\n\n"
	@printf "Command: "

	
print_footer:
	@printf "======================================\n\n\n"


test1: $(TEST_SIMPLE).in 
	@$(MAKE) --no-print-directory print_header
	stdbuf -i0 -o0 ./tshell < $(TEST_SIMPLE).in > $(TEST_SIMPLE).out 2>&1 
	@printf "Testcase (input: $(TEST_SIMPLE).in, output: $(TEST_SIMPLE).out, expected: $(TEST_SIMPLE).ex):\n"
	@diff -NuZ $(TEST_SIMPLE).out $(TEST_SIMPLE).ex && \
	  echo $(PASSED_STRING) || echo $(FAILED_STRING) Testcase: $(TEST_SIMPLE).in
	@$(MAKE) --no-print-directory print_footer


test2: $(TEST_ERR).in 
	@$(MAKE) --no-print-directory print_header
	stdbuf -i0 -o0 ./tshell < $(TEST_ERR).in > $(TEST_ERR).out 2>&1 
	@printf "Testcase (input: $(TEST_ERR).in, output: $(TEST_ERR).out, expected: $(TEST_ERR).ex):\n"
	@diff -NuZ $(TEST_ERR).out $(TEST_ERR).ex && \
	  echo $(PASSED_STRING) || echo $(FAILED_STRING) Testcase: $(TEST_ERR).in
	@$(MAKE) --no-print-directory print_footer



test3: $(TEST_IO).in 
	@$(MAKE) --no-print-directory print_header
	stdbuf -i0 -o0 ./tshell < $(TEST_IO).in > $(TEST_IO).out 2>&1 
	@printf "Content of $(TEST_IO).out:\n" > $(TEST_IO).log && \
	  cat $(TEST_IO).out >> $(TEST_IO).log && \
	  printf "\nContent of out-1.log:\n" >> $(TEST_IO).log && \
	  cat out-1.log >> $(TEST_IO).log && \
	  printf "\nContent of out-2.log:\n" >> $(TEST_IO).log && \
	  cat out-2.log >> $(TEST_IO).log
	@printf "Test (input: $(TEST_IO).in, log-output: $(TEST_IO).log, expected: $(TEST_IO).ex):\n"
	@diff -NuZ $(TEST_IO).log $(TEST_IO).ex && \
	  echo $(PASSED_STRING) || echo $(FAILED_STRING) Testcase: $(TEST_IO).in
	@$(MAKE) --no-print-directory print_footer


#test2: $(TEST_IO).in 
#	@$(MAKE) --no-print-directory print_header
#	stdbuf -i0 -o0 ./tshell < $(TEST_IO).in > $(TEST_IO).out 2>&1 
#	@printf "Test (input: $(TEST_IO).in, expected: $(TEST_IO).ex):\n"
#	@diff -NuZ $(TEST_IO).out $(TEST_IO).ex && \
#	  echo $(PASSED_STRING) || echo $(FAILED_STRING) the test: $(TEST_IO).in
#	@$(MAKE) --no-print-directory print_footer



#test3: $(TEST_ERR).in
#	HOME=/no/such/path stdbuf -i0 -o0 \
#	     ./tshell < $(TEST_ERR).in > $(TEST_ERR).out 2>&1 
#	@printf "Test (input: $(TEST_ERR).in, expected: $(TEST_ERR).ex):\n"
#	@diff -NuZ $(TEST_ERR).out $(TEST_ERR).ex && \
#	  echo $(PASSED_STRING) || echo "$(FAILED_STRING) the test: $(TEST_ERR).in"
#
	
#	&& \
#	     echo $(OK_STRING) || echo $(FAILED_STRING)
#	@printf "Test (input: $(TEST_ERR).in, expected: $(TEST_ERR).ex):\t\t"
#	@diff -NuZ $(TEST_ERR).out $(TEST_ERR).ex && \
#	  echo $(PASSED_STRING) || echo $(FAILED_STRING)
#	
#
