//HW5 by Yuchen Wang
//SU Net ID: ywang249  SUID: 905508464

//HW5.  Due: Wednesday (November 17) at 11:59pm

#include <iostream>
#include <map>
#include <list>
#include <vector>
#include <set>
#include <unordered_set>
#include <unordered_map>

using namespace std;

class myCompareClass
{
	//For all comparions, compare the sums of all int objects in the structures.

public:
	bool operator()(int *p1, int *p2) const; //set<int *>
	bool operator()(list<set<int *, myCompareClass> *> *p1, list<set<int *, myCompareClass> *> *p2) const;

	bool operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M1,
					const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M2) const;
};

bool myCompareClass::operator()(int *p1, int *p2) const
{
	return *p1 < *p2;
}

bool myCompareClass::operator()(list<set<int *, myCompareClass> *> *p1, list<set<int *, myCompareClass> *> *p2) const
{
	int sum1 = 0, sum2 = 0;

	for (set<int *, myCompareClass> *i : *p1)
	{
		for (int *j : *i)
			sum1 += *j;
	}

	for (set<int *, myCompareClass> *i : *p2)
	{
		for (int *j : *i)
			sum2 += *j;
	}

	return sum1 < sum2;
}

bool myCompareClass::operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M1,
								const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M2) const
{
	int sum1 = 0, sum2 = 0;

	for (pair<list<set<int *, myCompareClass> *> *, vector<int *> *> i : M1)
	{
		for (set<int *, myCompareClass> *j : *(i.first))
		{
			for (int *k : *j)
				sum1 += *k;
		}

		for (int *j : *(i.second))
			sum1 += *j;
	}

	for (pair<list<set<int *, myCompareClass> *> *, vector<int *> *> i : M2)
	{
		for (set<int *, myCompareClass> *j : *(i.first))
		{
			for (int *k : *j)
				sum2 += *k;
		}
		for (int *j : *(i.second))
			sum2 += *j;
	}

	return sum1 < sum2;
}

class myHashEqualClass
{
	//For Hashing function use h(sums int in the sturcture), where hash<int> h;
	//For Hashing, the sum = 2*odd numbers + even numbers
public:
	bool operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M1,
					const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M2) const;
	size_t operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M) const;
};

bool myHashEqualClass::operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M1,
								  const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M2) const
{
	int sum1 = 0, sum2 = 0;

	for (pair<list<set<int *, myCompareClass> *> *, vector<int *> *> i : M1)
	{
		for (set<int *, myCompareClass> *j : *(i.first))
		{
			for (int *k : *j)
				sum1 += *k;
		}

		for (int *j : *(i.second))
			sum1 += *j;
	}

	for (pair<list<set<int *, myCompareClass> *> *, vector<int *> *> i : M2)
	{
		for (set<int *, myCompareClass> *j : *(i.first))
		{
			for (int *k : *j)
				sum2 += *k;
		}

		for (int *j : *(i.second))
			sum2 += *j;
	}

	// cout << "Sum1 = " << sum1 << "Sum2 = " << sum2 << endl;

	return sum1 == sum2;
}

size_t myHashEqualClass::operator()(const map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> &M) const
{
	int sum = 0;
	hash<int> h;

	for (pair<list<set<int *, myCompareClass> *> *, vector<int *> *> i : M)
	{
		for (set<int *, myCompareClass> *j : *(i.first))
		{
			for (int *k : *j)
				sum += *k % 2 == 0 ? *k : (*k) * 2;
		}

		for (int *j : *(i.second))
			sum += *j % 2 == 0 ? *j : (*j) * 2;
	}

	// cout << "hashcode of " << &M << " s " << sum << endl;

	return h(sum);
}

//The following is a suggestion. You can implement the overloaded operator<< differently.
template <class T>
ostream &operator<<(ostream &str, const list<T *> &L)
{
	str << "[ ";

	for (T *i : L)
		str << *i << " ";

	str << "]";

	return str;
}

template <class T>
ostream &operator<<(ostream &str, const set<T *, myCompareClass> &S)
{
	str << "< ";

	for (T *i : S)
	{
		str << *i << " ";
	}

	str << ">";

	return str;
}

template <class T>
ostream &operator<<(ostream &str, const vector<T *> &V)
{
	str << "( ";

	for (T *i : V)
	{
		str << *i << " ";
	}

	str << ")";

	return str;
}

template <class T>
ostream &operator<<(ostream &str, const vector<T> &V)
{
	str << "( ";

	for (T i : V)
	{
		str << i << " ";
	}

	str << ")";

	return str;
}

template <class T1, class T2>
ostream &operator<<(ostream &str, const map<T1 *, T2 *, myCompareClass> &M)
{
	str << "{  ";

	for (pair<T1 *, T2 *> i : M)
	{
		str << *(i.first) << " " << *(i.second) << "  ";
	}

	str << "}";

	return str;
}

template <class T1, class T2>
ostream &operator<<(ostream &str, const map<T1, T2, myCompareClass> &M)
{
	str << "{  ";

	for (pair<T1, T2> i : M)
	{
		str << i.first << " " << i.second << "  ";
	}

	str << "}";

	return str;
}

template <class T>
ostream &operator<<(ostream &str, const set<T, myCompareClass> &S)
{
	str << "<\n";

	for (T i : S)
	{
		str << i << "\n";
	}

	str << ">" << endl;
	return str;
}

template <class T1, class T2>
ostream &operator<<(ostream &str, const unordered_map<T1, T2, myHashEqualClass, myHashEqualClass> &M)
{
	str << "{\n";

	for (pair<T1, T2> i : M)
	{
		str << i.first << " " << i.second << "\n";
	}

	str << "}" << endl;
	return str;
}

int main()
{
	map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> M1{{new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(5), new int(7)}, new set<int *, myCompareClass>{new int(2), new int(5), new int(8)}, new set<int *, myCompareClass>{new int(3), new int(6), new int(11)}}, new vector<int *>{new int(7), new int(11), new int(3)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(5), new int(17)}, new set<int *, myCompareClass>{new int(3), new int(5), new int(8)}, new set<int *, myCompareClass>{new int(1), new int(3), new int(6)}}, new vector<int *>{new int(4), new int(14), new int(3)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(4), new int(13)}, new set<int *, myCompareClass>{new int(2), new int(5), new int(18)}, new set<int *, myCompareClass>{new int(2), new int(6), new int(13)}}, new vector<int *>{new int(5), new int(11), new int(13)}}};

	map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> M2{{new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(5), new int(6), new int(13)}, new set<int *, myCompareClass>{new int(3), new int(4), new int(5)}, new set<int *, myCompareClass>{new int(3), new int(9), new int(11)}}, new vector<int *>{new int(4), new int(14), new int(3)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(5), new int(7), new int(13)}, new set<int *, myCompareClass>{new int(1), new int(11), new int(15)}, new set<int *, myCompareClass>{new int(3), new int(6), new int(8)}}, new vector<int *>{new int(5), new int(12), new int(3)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(4), new int(13)}, new set<int *, myCompareClass>{new int(2), new int(5), new int(12)}, new set<int *, myCompareClass>{new int(2), new int(13), new int(16)}}, new vector<int *>{new int(5), new int(17), new int(2)}}};

	map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass> M3{{new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(5), new int(7)}, new set<int *, myCompareClass>{new int(2), new int(5), new int(8)}, new set<int *, myCompareClass>{new int(3), new int(6), new int(11)}}, new vector<int *>{new int(7), new int(19), new int(13)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(3), new int(5), new int(17)}, new set<int *, myCompareClass>{new int(3), new int(5), new int(8)}, new set<int *, myCompareClass>{new int(1), new int(3), new int(6)}}, new vector<int *>{new int(4), new int(14), new int(3)}},
																				  {new list<set<int *, myCompareClass> *>{new set<int *, myCompareClass>{new int(1), new int(7), new int(13)}, new set<int *, myCompareClass>{new int(1), new int(2), new int(15)}, new set<int *, myCompareClass>{new int(6), new int(16), new int(20)}}, new vector<int *>{new int(5), new int(19), new int(4)}}};

	set<map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass>, myCompareClass> S1{M1, M2, M3};
	//For each STL container, at least three elements are required.

	cout << S1 << endl;

	unordered_map<map<list<set<int *, myCompareClass> *> *, vector<int *> *, myCompareClass>, vector<int>, myHashEqualClass, myHashEqualClass> H1{{M1, vector<int>{7, 8, 9}}, {M2, vector<int>{1, 2, 3}}, {M3, vector<int>{3, 5, 7}}};
	// //For each STL container, at least three elements are required.

	cout << H1 << endl;

	return 0;
}
